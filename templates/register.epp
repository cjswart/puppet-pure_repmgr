#!/bin/env python

'''
# Copyright (C) 2017 Collaboration of KPN and Splendid Data
#
# This file is part of puppet_pure_postgres.
#
# puppet_pure_barman is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# puppet_pure_postgres is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with puppet_pure_postgres.  If not, see <http://www.gnu.org/licenses/>.
'''

'''
register.py is a smart script that 
* connects to postgres locally, 
* finds replication config in repmgr db, 
* connects to master, 
* checks necessity for registering, 
* generates a unique nodeid, 
* creates a repmgr.conf usable for registering, and 
* runs register command.

1: register.py is run from puppet when a new standby is cloned, or a master is init'ed.
2: On next run, nodeid will be read from postgres as a fact by /etc/facter/facts.d/pure_repmgr_facts.sh
   and added to the main repmgr.conf.
This order is applied on purpose. If more than one standby would try to register with the exact same unique id,
all but one would fail, and tried again the next run, which would be ok. Adding a nodeid to to original repmgr.conf
would leave an incosistent situation (more than one node having same nodeid in repmgr.conf) which is harder to resolve automated.

Also note that it is required to set nodeid during clone. However, in our case nodeid is set by register.py.
Therefore nodeid is set to 100 if the fact script could not read it from the database.
For this reason the value of nodeid in repmgr.conf is disregarded by this script and is set by puppet after registeration was succesful.
'''

import sys
import psycopg2
import re
import subprocess
import tempfile

master   = None
nodeid   = None
conffile = '<%= $pure_repmgr::repmgr_conf %>'

print('Connecting locally.')
try:
   cn=psycopg2.connect(dbname='repmgr')
   cur=cn.cursor()
except:
   print('Could not connect. Is the local instance running?')
   sys.exit(-1)

#This re checks that clustername is a valid and with that prevents sql injection.
re_s=re.compile('[^a-zA-Z0-9]+')
try:
   #Read and parse repmgr.conf into a dict of key=val pairs.
   conf={}
   f=open(conffile)
   for l in f:
      #Everything after a '#' sign is comment and should be ignored
      l=l.split('#')[0]
      #a valid line should have '=' sign. Skip lines that dont (probably nothing but comment and spaces).
      if not '=' in l:
         continue
      k, v = l.split('=', 1)
      #Add value to dict with key as key. Strip spaces from key and val.
      conf[k.strip()] = v.strip()
   #And we should have nodename under which a db server would be registered if it already is.
   nodename=conf['node_name']
except Exception as e:
   print(e)
   print('Something went wrong reading parameter from '+conffile)
   sys.exit(-3)

print('Checking locally if this node was already registered.')
try:
   cur.execute('select node_id from repmgr.nodes where node_name = \'{0}\''.format(nodename))
   r=cur.next()
   if r[0]:
      print('Already registered as node {0}.'.format(r[0]))
      sys.exit()
except psycopg2.DatabaseError as e:
   print(e)
   print('DatabaseError. Probably because we are registering master for the first time.\n  Lets not worry about this one yet, but rollback transaction so we can still execute sql.')
   cn.rollback()
except Exception as e:
   pass

print('Checking replication role of this node')
try:
   cur.execute('select pg_is_in_recovery()')
   r=cur.next()
   if r[0]:
      print('This instance is standby.')
      role='standby'
   else:
      print('''This node is a master. Will still register, but slightly different: 
* not searching for master from registered noded, and 
* using "repmgr master register" instead of "repmgr standby register".''')
      master=cur
      role='master'
except Exception as e:
   print(e)
   print('Could not detect replication role')
   sys.exit(-4)

if not master:
   print('Looking for master.')
   try:
      cur.execute('select conninfo from repmgr.nodes')
      for r in cur:
         constr=r[0]
         print('Checking {0}'.format(constr))
         try:
            cn2=psycopg2.connect(constr)
         except Exception as e:
            print(e)
            print('Could not connect to {0}. Skipping.'.format(constr))
            continue
         try:
            print('  Checking replication role.')
            cur2=cn2.cursor()
            cur2.execute('select pg_is_in_recovery()')
            r=cur2.next()
            if r[0]:
               print('  Instance is standby.')
            else:
               print('  Instance is master. Master detected.')
               master=cur2
               break
         except Exception as e:
            print(e)
            print('Something when wrong detecting role of {0}'.format(constr))
   except Exception as e:
      print(e)
      print('Could not find connectstrings of other cluster nodes.')

if not master:
   print('No master detected. Cannot continue.')
   sys.exit(-5)

try:
   print('Determining next free nodeid.')
   master.execute('select max(node_id) from repmgr.nodes')
   r=master.next()
   nodeid=r[0]+1
except:
   nodeid=1
print('Nodeid={0}'.format(nodeid))
try:
   print('Generating temporary repmgr.conf')
   of = tempfile.NamedTemporaryFile(prefix='repmgr.conf')
   conffile = of.name
   conf['node_id'] = nodeid
   for k in sorted(conf.keys()):
      of.write('{0}={1}\n'.format(k,conf[k]))
   of.flush()
   print('Temporary repmgr.conf file generated as {0}'.format(conffile))
except Exception as e:
   print(e)
   print('Could not write temporary config file')
   sys.exit(-6)

print('registering {0}'.format(role))
subprocess.check_call([ '<%= $pure_postgres::params::pg_bin_dir %>/repmgr', '-f', conffile, role, 'register' ])
